------------------------------------------------------------------
-- stream.ast
--
-- this module implements the Stream structure
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------

load system "util".

------------------------------------------------------------------
structure Stream
------------------------------------------------------------------
-- Asteroid stream implementation based on lists
with

data stream.
data curr_ix.

function __init__
  with stream:%list do
    let this @stream = stream @copy(). -- shallow copy of input list
    let this @curr_ix = 0.
  orwith none do
    let this @stream = [].
    let this @curr_ix = 0.
  end

function eof
  with none do
    if this @curr_ix == this @stream @length() do
      return true.
    else do
      return false.
    end
  end

function peek
  with none do
    if this @eof() do
      return none.
    else do
      return this @stream @(this @curr_ix).
    end
  end

function next
  with none do
    if this @eof() do
      return none.
    else do
      let this @curr_ix = this @curr_ix + 1.
    end
  end

function get
  with none do
    return this @peek().
  end

function rewind
  with none do
    let this @curr_ix = 0.
  end

function map
  with f do
    for i in 0 to this @stream @length()-1 do
      let this @stream @i = f(this @stream @i).
    end
  end

function append
  with item do
    this @stream @append(item).
  end

function __string__
with none do return
escape
"
from asteroid_state import state
global __retval__

this_val = state.symbol_table.lookup_sym('this')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

__retval__ = ('string', term2string(memory[0]))
"
end

end -- Stream
