------------------------------------------------------------------
-- bitwise.ast
--
-- this module defines bitwise operations
--
------------------------------------------------------------------

------------------------------------------------------------------
function band
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] & y_val[1])
"
end

------------------------------------------------------------------
function bor
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] | y_val[1])
"
end

------------------------------------------------------------------
function bnot
------------------------------------------------------------------
with(x:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('integer', ~x_val[1])
"
end

------------------------------------------------------------------
function bxor
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] ^ y_val[1])
"
end

------------------------------------------------------------------
function bleft_shift
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] << y_val[1])
"
end

------------------------------------------------------------------
function bright_shift
------------------------------------------------------------------
with(x:%integer, y:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')
y_val = state.symbol_table.lookup_sym('y')

__retval__ = ('integer', x_val[1] >> y_val[1])
"
end

------------------------------------------------------------------
function bcomplement
------------------------------------------------------------------
with(x:%integer) do return escape
"
global __retval__
x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('integer', ~x_val)
"
end