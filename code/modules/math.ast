------------------------------------------------------------------
-- math.ast
--
-- this module implements the mathematical operators
-- and constants.
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------
-- NOTE: escaped Python code can return a value to the parent
--       Asteroid code via the __retval__ return value register.
--       For examples see code below.
--
-- NOTE: 'promote' is the type promotion table for primitive
--       builtin types which implements the type hierarchy:
--
--             integer < real < string and list
------------------------------------------------------------------

------------------------------------------------------------------
let pi = escape
------------------------------------------------------------------
"
from math import pi
global __retval__
__retval__ = ('real',pi)
"

------------------------------------------------------------------
function sqrt
------------------------------------------------------------------
with a do return escape
"
global __retval__
from asteroid_state import state
from math import sqrt

val_a = state.symbol_table.lookup_sym('a')
if val_a[0] not in ['integer','real']:
  raise ValueError('unsupported type {} for sqrt'.format(val_a[0]))
__retval__ = ('real',sqrt(val_a[1]))
"
end

------------------------------------------------------------------
function random
------------------------------------------------------------------
-- return a random floating point number in the range [0.0, 1.0).
with none do return escape
"
import random
global __retval__

__retval__ = ('real', random.random())
"
end

------------------------------------------------------------------
function randint
------------------------------------------------------------------
-- return a random integer N such that lo <= N <= hi.
with (lo,hi) do return escape
"
import random
from asteroid_support import assert_match
global __retval__

(TYPE, lo_val) = state.symbol_table.lookup_sym('lo')
assert_match(TYPE, 'integer')
(TYPE, hi_val) = state.symbol_table.lookup_sym('hi')
assert_match(TYPE, 'integer')

__retval__ = ('integer', random.randint(lo_val, hi_val))
"
end
