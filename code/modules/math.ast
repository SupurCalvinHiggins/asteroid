------------------------------------------------------------------
-- math.ast
--
-- this module implements the mathematical operators
-- and constants.
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------
-- NOTE: escaped Python code can return a value to the parent
--       Asteroid code via the __retval__ return value register.
--       For examples see code below.
--
-- NOTE: 'promote' is the type promotion table for primitive
--       builtin types which implements the type hierarchy:
--
--             integer < real < string and list
------------------------------------------------------------------

------------------------------------------------------------------
let pi = escape
------------------------------------------------------------------
"
from math import pi
global __retval__
__retval__ = ('real',pi)
"

------------------------------------------------------------------
let e = escape
------------------------------------------------------------------
"
from math import e
global __retval__
__retval__ = ('real',e)
"

------------------------------------------------------------------
let tau = escape
------------------------------------------------------------------
"
from math import tau
global __retval__
__retval__ = ('real',tau)
"

------------------------------------------------------------------
function sqrt
------------------------------------------------------------------
with a do return escape
"
global __retval__
from asteroid_state import state
from math import sqrt

val_a = state.symbol_table.lookup_sym('a')
if val_a[0] not in ['integer','real']:
  raise ValueError('unsupported type {} for sqrt'.format(val_a[0]))
__retval__ = ('real',sqrt(val_a[1]))
"
end

------------------------------------------------------------------
function pow
------------------------------------------------------------------
with (b,p:%integer) do return escape
"
global __retval__
from asteroid_state import state

val_b = state.symbol_table.lookup_sym('b')
val_p = state.symbol_table.lookup_sym('p')

if val_b[0] not in ['integer','real']:
  raise ValueError('unsupported type {} for sqrt'.format(val_b[0]))

__retval__ = (val_b[0],val_b[1]**val_p[1])
"
end

------------------------------------------------------------------
function mod
------------------------------------------------------------------
with (v,d) do return escape
"
global __retval__
from asteroid_state import state
from asteroid_support import promote

val_v = state.symbol_table.lookup_sym('v')
val_d = state.symbol_table.lookup_sym('d')

if val_v[0] not in ['integer','real']:
  raise ValueError('unsupported type {} for sqrt'.format(val_v[0]))

if val_d[0] not in ['integer','real']:
  raise ValueError('unsupported type {} for sqrt'.format(val_d[0]))

__retval__ = (promote(val_v[0],val_d[0]),val_v[1] % val_d[1])
"
end

------------------------------------------------------------------
function random
------------------------------------------------------------------
-- return a random floating point number in the range [0.0, 1.0).
with none do return escape
"
import random
global __retval__

__retval__ = ('real', random.random())
"
end

------------------------------------------------------------------
function randint
------------------------------------------------------------------
-- return a random integer N such that lo <= N <= hi.
with (lo,hi) do return escape
"
import random
from asteroid_support import assert_match
global __retval__

(TYPE, lo_val) = state.symbol_table.lookup_sym('lo')
assert_match(TYPE, 'integer')
(TYPE, hi_val) = state.symbol_table.lookup_sym('hi')
assert_match(TYPE, 'integer')

__retval__ = ('integer', random.randint(lo_val, hi_val))
"
end
