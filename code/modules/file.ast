------------------------------------------------------------------
-- Basic File I/O wrapper
------------------------------------------------------------------

------------------------------------------------------------------
structure File with
    data f.
end
------------------------------------------------------------------
    
------------------------------------------------------------------
function fopen
------------------------------------------------------------------
with (name:%string, mode:%string) do 

let file = File()
return escape
"
from asteroid_state import state
global __retval__

# Get variables
file_val = state.symbol_table.lookup_sym('file')
name_val = state.symbol_table.lookup_sym('name')
mode_val = state.symbol_table.lookup_sym('mode')

# destructure object
(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

# Open file
f = open(name_val[1], mode_val[1])

# Set memory location
memory[0] = ('foreign', f)

__retval__ = file_val
"
end
------------------------------------------------------------------


------------------------------------------------------------------
function freadline
------------------------------------------------------------------
with file:%File do return escape
"
global __retval__
from asteroid_state import state
file_val = state.symbol_table.lookup_sym('file')

(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

(FOREIGN, py_file) = memory[0]

line = py_file.readline()

__retval__ = ('string', line)
"
end
------------------------------------------------------------------

------------------------------------------------------------------
function fwrite
------------------------------------------------------------------
with (file:%File, contents:%string) do escape
"
from asteroid_state import state
file_val = state.symbol_table.lookup_sym('file')
contents = state.symbol_table.lookup_sym('contents')

(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

(FOREIGN, py_file) = memory[0]

py_file.write(contents[1])
"
end
------------------------------------------------------------------

------------------------------------------------------------------
function fclose
------------------------------------------------------------------
with file:%File do escape
"
from asteroid_state import state
file_val = state.symbol_table.lookup_sym('file')

(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

(FOREIGN, py_file) = memory[0]

py_file.close()
"
end