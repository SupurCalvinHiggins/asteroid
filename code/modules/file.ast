------------------------------------------------------------------
-- Basic File I/O wrapper
------------------------------------------------------------------

structure FILE with
    data f.
end
------------------------------------------------------------------
function fopen
------------------------------------------------------------------
with (name:%string, mode:%string) do

let file = FILE().

return escape
"
from asteroid_state import state
global __retval__

# Get variables
file_val = state.symbol_table.lookup_sym('file')
name_val = state.symbol_table.lookup_sym('name')
mode_val = state.symbol_table.lookup_sym('mode')

# destructure object
(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

# Open file
f = open(name_val[1], mode_val[1])

memory[0] = ('foreign', f)

__retval__ = file_val
"
end
------------------------------------------------------------------


------------------------------------------------------------------
function freadline
------------------------------------------------------------------
with file:%FILE do return escape
"
global __retval__
from asteroid_state import state
file_val = state.symbol_table.lookup_sym('file')

# destructure object
(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

foreign_object = memory[0]

line = foreign_object[1].readline()

__retval__ = ('string', line)
"
end
------------------------------------------------------------------

------------------------------------------------------------------
function fwrite
------------------------------------------------------------------
with (file:%FILE, contents:%string) do escape
"
from asteroid_state import state
file_val = state.symbol_table.lookup_sym('file')
contents = state.symbol_table.lookup_sym('contents')

# destructure object
(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

foreign_object = memory[0]

foreign_object[1].write(contents[1])
"
end
------------------------------------------------------------------

------------------------------------------------------------------
function fclose
------------------------------------------------------------------
with file do escape
"
from asteroid_state import state
file_val = state.symbol_table.lookup_sym('file')

# destructure object
(OBJECT,
(CLASS_ID, (ID, class_id)),
(OBJECT_MEMORY, (LIST, memory))) = file_val

foreign_object = memory[0]

foreign_object[1].close()
"
end