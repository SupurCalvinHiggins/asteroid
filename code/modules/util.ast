------------------------------------------------------------------
-- util.ast
--
-- this module defines some standard functions, e.g., eval
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------


------------------------------------------------------------------
-- TYPE CONVERSION FUNCTIONS --
------------------------------------------------------------------

------------------------------------------------------------------
function tointeger
------------------------------------------------------------------
with item do return escape
"
global __retval__
from asteroid_state import state

(TYPE, item_val) = state.symbol_table.lookup_sym('item')
__retval__ = ('integer', int(item_val))
"
end

------------------------------------------------------------------
function toreal
------------------------------------------------------------------
with item do return escape
"
global __retval__
from asteroid_state import state

(TYPE, item_val) = state.symbol_table.lookup_sym('item')
__retval__ = ('real', float(item_val))
"
end

------------------------------------------------------------------
function toboolean
------------------------------------------------------------------
with item do return escape
"
global __retval__
from asteroid_state import state

(TYPE, item_val) = state.symbol_table.lookup_sym('item')
__retval__ = ('boolean', bool(float(item_val)))
"
end

------------------------------------------------------------------
function tostring
------------------------------------------------------------------
with item do return escape
"
global __retval__
from asteroid_state import state
from asteroid_support import term2string

item_val = state.symbol_table.lookup_sym('item')
__retval__ = ('string', term2string(item_val))
"
end

------------------------------------------------------------------
-- TYPE TESTING FUNCTIONS --
------------------------------------------------------------------

------------------------------------------------------------------
function islist
------------------------------------------------------------------
with item do return escape
"
global __retval__
from asteroid_state import state

(TYPE, item_val) = state.symbol_table.lookup_sym('item')
__retval__ = ('boolean', (TYPE == 'list'))
"
end

------------------------------------------------------------------
-- UTILITY FUNCTIONS --
------------------------------------------------------------------

------------------------------------------------------------------
-- use this structure to throw error exceptions with a
-- single argument
structure Error with
  data err_val.
  end

-- NOTE: this moved into the interpreter as an eval expression.
------------------------------------------------------------------
-- function eval
------------------------------------------------------------------
-- evaluates a term in the current term interpretation environment
-- with item do return escape
--"
--global __retval__
--from asteroid_state import state

--item_val = state.symbol_table.lookup_sym('item')
--state.ignore_quote = True
--__retval__ = walk(item_val)
--state.ignore_quote = False
--"
--end

------------------------------------------------------------------
function exit
------------------------------------------------------------------
with msg do escape
"
import sys
from asteroid_state import state

(MSGTYPE, msg_val) = state.symbol_table.lookup_sym('msg')

if MSGTYPE != 'string':
   raise ValueError('exit expected a string got {}'
   	 .format(MSGTYPE))

print(msg_val)
sys.exit(1)
"
end

------------------------------------------------------------------
function copy
------------------------------------------------------------------
-- make a deep copy of an Asteroid object
with obj do return escape
"
global __retval__
import copy
from asteroid_state import state

obj_val = state.symbol_table.lookup_sym('obj')

__retval__ = copy.deepcopy(obj_val)
"
end

------------------------------------------------------------------
function cls
------------------------------------------------------------------
-- clear screen
with none do escape
"
import os
import platform

if platform.win32_ver()[0]:
    os.system('cls')
else:
    os.system('clear')
"
end

------------------------------------------------------------------
function sleep
------------------------------------------------------------------
-- program sleep for secs seconds
with secs do escape
"
import time

(TYPE, val) = state.symbol_table.lookup_sym('secs')

if not TYPE in ['integer','real']:
   raise ValueError('sleep expected an integer or real value got {}'
   	 .format(TYPE))

time.sleep(val)
"
end

------------------------------------------------------------------
function random
------------------------------------------------------------------
-- return a random floating point number in the range [0.0, 1.0).
with none do return escape
"
import random
global __retval__

__retval__ = ('real', random.random())
"
end

------------------------------------------------------------------
function randint
------------------------------------------------------------------
-- return a random integer N such that lo <= N <= hi.
with (lo,hi) do return escape
"
import random
from asteroid_support import assert_match
global __retval__

(TYPE, lo_val) = state.symbol_table.lookup_sym('lo')
assert_match(TYPE, 'integer')
(TYPE, hi_val) = state.symbol_table.lookup_sym('hi')
assert_match(TYPE, 'integer')

__retval__ = ('integer', random.randint(lo_val, hi_val))
"
end

------------------------------------------------------------------
function zip
------------------------------------------------------------------
-- implements Python's zip function
with (list1,list2) do return escape
"
import random
from asteroid_support import assert_match
global __retval__

(TYPE, list1_val) = state.symbol_table.lookup_sym('list1')
assert_match(TYPE, 'list')
(TYPE, list2_val) = state.symbol_table.lookup_sym('list2')
assert_match(TYPE, 'list')

# zip it with Python's zip
l = list(zip(list1_val,list2_val))

# turn Python tuples into Asteroid tuples and
# put them onto an output list
out_list = []
for p in l:
  (i,t) = p
  out_list.append(('tuple',[i,t]))

__retval__ = ('list', out_list)
"
end

------------------------------------------------------------------
function length
------------------------------------------------------------------
with item do return escape
"
global __retval__
from asteroid_state import state

item_val = state.symbol_table.lookup_sym('item')

if item_val[0] not in ['list','tuple']:
   raise ValueError(
   	 'length expected a list or tuple got {}'
	 .format(item_val[0]))

__retval__ = ('integer', len(item_val[1]))
"
end


------------------------------------------------------------------
-- HashTable
-- Asteroid hash table implementation using Python dictionaries
------------------------------------------------------------------
structure HashTable with

------------------------------------------------------------------
data table.

------------------------------------------------------------------
function __init__
-- constructor for HashTable initializes the underlying dictionary
with self do
escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (OBJECT_MEMORY, (LIST, memory))) = self_val

# the table is in the first slot in the object memory
# store the dictionary as a foreign object in this slot
memory[0] = ('foreign', dict())
"
return none
end

------------------------------------------------------------------
function insert
with (self,name,value) do
escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
name_val = state.symbol_table.lookup_sym('name')
value_val = state.symbol_table.lookup_sym('value')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (OBJECT_MEMORY, (LIST, memory))) = self_val

# the table is in the first slot in the object memory
# insert name-value pair
(FOREIGN, dictionary) = memory[0]
dictionary[name_val] = value_val
"
return none
end

------------------------------------------------------------------
function get
with (self,name) do return escape
"
from asteroid_state import state
global __retval__

self_val = state.symbol_table.lookup_sym('self')
name_val = state.symbol_table.lookup_sym('name')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (OBJECT_MEMORY, (LIST, memory))) = self_val

# the table is in the first slot in the object memory
# get the value_val associated with name_val
(FOREIGN, dictionary) = memory[0]
__retval__ = dictionary[name_val]
"
end

end -- structure

------------------------------------------------------------------
-- Stream
-- Asteroid stream implementation based on lists
------------------------------------------------------------------
structure Stream with

------------------------------------------------------------------
data stream.
data curr_ix.

------------------------------------------------------------------
function __init__
  with (self, stream) do
    assert is_list(stream).
    let self @stream = stream @copy(). -- shallow copy of input list
    let self @curr_ix = 0.
  orwith self do
    let self @stream = [].
    let self @curr_ix = 0.
  end

  ------------------------------------------------------------------
  function eof
    with self do
      -- TODO: @ operator associativity
      if self @curr_ix == (self @stream) @length() do
        return true.
      else do
        return false.
      end
    end

------------------------------------------------------------------
function peek
  with self do
    if self @eof() do
      return none.
    else do
      if self @curr_ix + 1 == (self @stream) @length() do
        return none
      else do
        return (self @stream) @(self @curr_ix + 1).
      end
    end
  end

------------------------------------------------------------------
function next
  with self do
    if self @eof() do
      return none.
    else do
      let self @curr_ix = self @curr_ix + 1.
    end
  end

------------------------------------------------------------------
function get
  with self do
    if self @eof() do
      return none.
    else do
      return (self @stream) @(self @curr_ix).
    end
  end

------------------------------------------------------------------
function rewind
  with self do
    let self @curr_ix = 0.
  end

------------------------------------------------------------------
function map
  with (self,f) do
    for i in 0 to (self @stream) @length()-1 do
      let (self @stream) @i = f((self @stream) @i).
    end
  end

------------------------------------------------------------------
function append
  with (self,item) do
    (self @stream) @append(item).
  end

------------------------------------------------------------------
function __string__
with self do return
escape
"
from asteroid_state import state
global __retval__

self_val = state.symbol_table.lookup_sym('self')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (OBJECT_MEMORY, (LIST, memory))) = self_val

__retval__ = ('string', term2string(memory[0]))
"
end

end -- structure
