------------------------------------------------------------------
-- prologue.ast
--
-- the standard Asteroid prologue defining global functions.
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------

------------------------------------------------------------------
-- List member functions
------------------------------------------------------------------

-- NOTE: these functions must appear the
-- 'list_member_functions' dictionary

-- for implementation details see python lists in
-- https://docs.python.org/3/tutorial/datastructures.html

-- list member function association table
escape
"
global list_member_functions

list_member_functions.update({
    'length'    : '__list_length__',
    'append'    : '__list_append__',
    'extend'    : '__list_extend__',
    'insert'    : '__list_insert__',
    'remove'    : '__list_remove__',
    'pop'       : '__list_pop__',
    'clear'     : '__list_clear__',
    'index'     : '__list_index__',
    'count'     : '__list_count__',
    'sort'      : '__list_sort__',
    'reverse'   : '__list_reverse__',
    'copy'      : '__list_copy__',
    'shuffle'   : '__list_shuffle__',
    })
".
------------------------------------------------------------------
function __list_length__
------------------------------------------------------------------
with self do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')

if self_val[0] != 'list':
   raise ValueError('__list_length__ expected a list got {}'
	     .format(self_val[0]))

__retval__ = ('integer', len(self_val[1]))
"
end

------------------------------------------------------------------
function __list_append__
------------------------------------------------------------------
with (self,item) do escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')

assert_match(self_val[0],'list')

self_val[1].append(item_val)
"
end

------------------------------------------------------------------
function __list_extend__
------------------------------------------------------------------
with (self,item) do escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')

assert_match(self_val[0],'list')
assert_match(item_val[0],'list')

self_val[1].extend(item_val)
"
end

------------------------------------------------------------------
function __list_insert__
------------------------------------------------------------------
with (self,ix,item) do escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
ix_val = state.symbol_table.lookup_sym('ix')
item_val = state.symbol_table.lookup_sym('item')

assert_match(self_val[0],'list')
assert_match(ix_val[0],'integer')

self_val[1].insert(ix_val[1],item_val)
"
end

------------------------------------------------------------------
function __list_remove__
------------------------------------------------------------------
with (self,item) do escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')

assert_match(self_val[0],'list')
self_val[1].remove(ix_val[1],item_val)
"
end

------------------------------------------------------------------
function __list_pop__
------------------------------------------------------------------
with (self,ix) do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
ix_val = state.symbol_table.lookup_sym('ix')

assert_match(self_val[0],'list')
assert_match(ix_val[0],'integer')

__retval__ = self_val[1].pop(ix_val[1])
"
orwith self do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
assert_match(self_val[0],'list')

__retval__ = self_val[1].pop()
"
end

------------------------------------------------------------------
function __list_clear__
------------------------------------------------------------------
with self do escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
assert_match(self_val[0],'list')
self_val[1].clear()
"
end

------------------------------------------------------------------
function __list_index__
------------------------------------------------------------------
with (self,item,startix,endix) do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')
startix_val = state.symbol_table.lookup_sym('startix')
endix_val = state.symbol_table.lookup_sym('endix')

assert_match(self_val[0],'list')
assert_match(startix_val[0],'integer')
assert_match(endix_val[0],'integer')

__retval__ = ('integer', self_val[1].index(item_val[1],
                            startix_val[1],
                            endix_val[1]))
"
orwith (self,item,startix) do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')
startix_val = state.symbol_table.lookup_sym('startix')

assert_match(self_val[0],'list')
assert_match(startix_val[0],'integer')

__retval__ = ('integer', self_val[1].index(item_val[1], startix_val[1]))
"
orwith (self,item) do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')

assert_match(self_val[0],'list')

__retval__ = ('integer', self_val[1].index(item_val[1]))
"
end

------------------------------------------------------------------
function __list_count__
------------------------------------------------------------------
with (self,item) do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')

assert_match(self_val[0],'list')

__retval__ = self_val[1].count(item_val)
"
end

------------------------------------------------------------------
function __list_sort__
------------------------------------------------------------------
with (self,reverse) do escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
reverse_val = state.symbol_table.lookup_sym('reverse')

assert_match(self_val[0],'list')
assert_match(reverse_val[0],'boolean')

self_val[1].sort(reverse=reverse_val[1])
"
orwith self do escape
"
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
assert_match(self_val[0],'list')
self_val[1].sort()
"
end

------------------------------------------------------------------
function __list_reverse__
------------------------------------------------------------------
with self do return escape
"
from asteroid_state import state
global __retval__

self_val = state.symbol_table.lookup_sym('self')
assert_match(self_val[0],'list')
self_val[1].reverse()
__retval__ = self_val
"
end

------------------------------------------------------------------
function __list_copy__
------------------------------------------------------------------
-- make a shallow copy of the list
with self do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
assert_match(self_val[0],'list')
__retval__ = ('list', self_val[1].copy())
"
end

------------------------------------------------------------------
function __list_shuffle__
------------------------------------------------------------------
-- return a random permutation of a given list - in place!
with self do escape
"
import random
import copy
from asteroid_support import assert_match

(LIST, self_val) = state.symbol_table.lookup_sym('self')
assert_match(LIST, 'list')
random.shuffle(self_val)
"
end

------------------------------------------------------------------
-- String member functions
------------------------------------------------------------------

-- NOTE: these functions must appear the
-- 'string_member_functions' dictionary

-- for implementation details see python lists in
-- https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str

escape
"
global string_member_functions

string_member_functions.update({
    'length'    : '__string_length__',
    'explode'   : '__string_explode__',
    'join'      : '__string_join__',
    })
".
------------------------------------------------------------------
function __string_length__
------------------------------------------------------------------
with self do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
assert_match(self_val[0],'string')
__retval__ = ('integer', len(self_val[1]))
"
end

------------------------------------------------------------------
function __string_explode__
------------------------------------------------------------------
with self do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
assert_match(self_val[0],'string')
__retval__ = ('list', [('string', char) for char in self_val[1]])
"
end

------------------------------------------------------------------
function __string_join__
------------------------------------------------------------------
with (self,item) do return escape
"
global __retval__
from asteroid_state import state

self_val = state.symbol_table.lookup_sym('self')
item_val = state.symbol_table.lookup_sym('item')

assert_match(self_val[0],'string')
assert_match(item_val[0],'list')

raw_list = []
for (t,v) in item_val[1]:
  raw_list.append(v)

__retval__ = ('string', self_val[1].join(raw_list))
"
end
