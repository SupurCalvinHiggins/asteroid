
--------------------------------------
-- patterns_test28.ast
-- a simple program to test for
-- subsumption detection in Asteroid.
--------------------------------------
--------------------------------------
load system io.
load "util".

structure Person with
    data name.
    data age.
    data gender.
    end

-- define a list of persons
let people = [
    Person("George", 32, "M"),
    Person("Sophie", 46, "F"),
    Person("Oliver", 21, "X")
    ].

function test_function 
  with *ptrn1 do
    return "Found a p.".
  with *ptrn2 do   -- *** The regular expression ".*g.*" will subsume ".*gg.*"
    return "Found a g.".
  with *ptrn3 do
    return "Found a v.".
  with *ptrn4 do  -- will be redundant
    return "Found a gg.".
  end.
  
let ptrn1 = pattern with Person(name:".*p.*",_,_).
let ptrn2 = pattern with Person(name:".*g.*",_,_).
let ptrn3 = pattern with Person(name:".*v.*",_,_).
let ptrn4 = pattern with Person(name:".*gg.*",_,_).

let loopCounter = 0.

-- print names that contain 'p'
for Person(_,_,_) in people do
  try
    io @println (test_function( people @loopCounter )).
  catch Exception("RedundantPatternFound",s) do
    io @println("PASS.").
  catch e do
    io @println("FAIL.").
    throw Error("FAIL: unexpected error "+e).
  end.
  let loopCounter = loopCounter + 1.
end.

