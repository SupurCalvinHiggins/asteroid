
-- implements Peano addition using a lookup table for the rewrite rules

load "util".
load "io".

structure S with
    data x.
    end 
    
structure add with
    data left.
    data right.
    end .

let rule_table = [
    ('add(x,0), 'reduce(x)),
    ('add(x,S(y)), 'S(reduce(add(x,y))))
    ].

function reduce 
    with term do
        for i in 0 to rule_table @length()-1 do
            -- limit visibility of free variables of the rewrite rules
            -- to the with block scope
            let (lhs, rhs) = rule_table@i.
            if term is *lhs do
                return eval rhs.
            end 
        end 
        return term.
    end 

println (reduce('add(S(S(0)),S(S(S(0)))))).
assert (reduce('add(S(S(0)),S(S(S(0))))) is S(S(S(S(S(0)))))).
