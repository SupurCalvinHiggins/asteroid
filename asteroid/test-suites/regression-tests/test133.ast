load system io.

function foo
    with %pattern do
        io @println("is a pattern").
    with _ do
        io @println("not a pattern").
    end

foo (pattern x).
foo (lambda with x do return x).

function foo
    with %pattern do
        io @println("is a pattern").
    with %function do
        io @println("not a pattern").
    end

foo (pattern x).
foo (lambda with x do return x).


function foo
    with %function do
        io @println("not a pattern").
    with %pattern do
        io @println("is a pattern").
    end

foo (pattern x).
foo (lambda with x do return x).

function foo
    with %pattern do
        io @println("not a pattern").
    with %pattern do
        io @println("is a pattern").
    end

try
    foo (pattern x).
    throw Error("Redundanct pattern not detected!").
catch e do
    io @println("Success!").
end

let x:%pattern = 1.


function foo
    with %pattern do
        io @println("not a pattern").
    with %integer do
        io @println("is a pattern").
    end

try
    foo (pattern x).
    foo (1).
catch e do
    io @println("Success!").
end

function foo
    with %pattern do
        io @println("not a pattern").
    with %real do
        io @println("is a pattern").
    end

try
    foo (pattern x).
    foo (1.1).
catch e do
    io @println("Success!").
end

function foo
    with %integer do
        io @println("not a pattern").
    with %pattern do
        io @println("is a pattern").
    end


foo (pattern x).
foo (1).

function foo
    with %pattern do
        io @println("not a pattern").
    with %string do
        io @println("is a pattern").
    end

try
    foo (pattern x).
    foo ("hello").
catch e do
    io @println("Success!").
end